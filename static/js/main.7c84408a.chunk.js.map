{"version":3,"sources":["Header.js","Note.js","NotesList.js","App.js","index.js"],"names":["Header","props","React","createElement","className","onClick","addNote","type","placeholder","value","searchText","onChange","e","onSearch","target","Note","note","title","updatedValue","editMeId","id","onType","description","removeNote","NotesList","noteElements","notes","filter","doesMatchSearch","map","key","App","_Component","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","Date","now","newNote","setState","_toConsumableArray","updatedKey","updatedNotes","text","newSearchText","toLowerCase","titleMatch","includes","descriptionMatch","hasMatch","noteId","_inherits","_createClass","stringifiedNotes","JSON","stringify","localStorage","setItem","getItem","savedNotes","parse","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7c84408a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  const callSearch = (e) => {\r\n    props.onSearch(e.target.value);\r\n  };\r\n  return (\r\n    <header>\r\n      <h1 className=\"app-header__title\">Super Sticky Notes</h1>\r\n      <aside className=\"app-header__controls\">\r\n        <button className=\"add-new\" onClick={props.addNote}>\r\n          + New Note\r\n        </button>\r\n        <input\r\n          className=\"search\"\r\n          type=\"text\"\r\n          placeholder=\"Type here to search...\"\r\n          value={props.searchText}\r\n          onChange={callSearch}\r\n        />\r\n      </aside>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Note = (props) => {\r\n  const updateTitle = (e) => {\r\n    const updatedValue = e.target.value;\r\n    const editMeId = props.note.id;\r\n    props.onType(editMeId, \"title\", updatedValue);\r\n  };\r\n  const updateDescription = (e) => {\r\n    const updatedValue = e.target.value;\r\n    const editMeId = props.note.id;\r\n    props.onType(editMeId, \"description\", updatedValue);\r\n  };\r\n\r\n  const clickDelete = () => {\r\n    props.removeNote(props.note.id);\r\n  };\r\n  return (\r\n    <li className=\"note\">\r\n      <input\r\n        className=\"note__title\"\r\n        type=\"text\"\r\n        placeholder=\"Title\"\r\n        value={props.note.title}\r\n        onChange={updateTitle}\r\n      />\r\n      <textarea\r\n        className=\"note__description\"\r\n        placeholder=\"Description...\"\r\n        value={props.note.description}\r\n        onChange={updateDescription}\r\n      />\r\n      <span className=\"note__delete\" onClick={clickDelete}>\r\n        X\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport Note from \"./Note.js\";\r\n\r\nconst NotesList = (props) => {\r\n  const keepSearchMatches = (note) => note.doesMatchSearch;\r\n  const searchMatches = props.notes.filter(keepSearchMatches);\r\n  const renderNote = (note) => (\r\n    <Note\r\n      removeNote={props.removeNote}\r\n      onType={props.onType}\r\n      note={note}\r\n      key={note.id}\r\n    />\r\n  );\r\n  const noteElements = searchMatches.map(renderNote);\r\n  return <ul className=\"notes-list\">{noteElements}</ul>;\r\n};\r\n\r\nexport default NotesList;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n\n  addNote = () => {\n    // create a new note\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    // add new note to existing notes array in state\n    this.setState({ notes: [newNote, ...this.state.notes] });\n  };\n\n  onType = (editMeId, updatedKey, updatedValue) => {\n    // editMeId == id of the note that is edited.\n    // updatedKey == title or description field\n    // updatedValue == value of title or description\n    const updatedNotes = this.state.notes.map((note) => {\n      if (note.id !== editMeId) {\n        return note;\n      } else {\n        if (updatedKey === \"title\") {\n          note.title = updatedValue;\n          return note;\n        } else {\n          note.description = updatedValue;\n          return note;\n        }\n      }\n    });\n    this.setState({ notes: updatedNotes });\n  };\n\n  onSearch = (text) => {\n    const newSearchText = text.toLowerCase();\n    const updatedNotes = this.state.notes.map((note) => {\n      if (!newSearchText) {\n        note.doesMatchSearch = true;\n        return note;\n      } else {\n        const title = note.title.toLowerCase();\n        const description = note.description.toLowerCase();\n        const titleMatch = title.includes(newSearchText);\n        const descriptionMatch = description.includes(newSearchText);\n        const hasMatch = titleMatch || descriptionMatch;\n        note.doesMatchSearch = hasMatch;\n        return note;\n      }\n    });\n    this.setState({\n      notes: updatedNotes,\n      searchText: newSearchText\n    });\n  };\n\n  removeNote = (noteId) => {\n    const updatedNotes = this.state.notes.filter((note) => note.id !== noteId);\n    this.setState({ notes: updatedNotes });\n  };\n\n  componentDidUpdate() {\n    const stringifiedNotes = JSON.stringify(this.state.notes);\n    localStorage.setItem(\"savedNotes\", stringifiedNotes);\n  }\n\n  componentDidMount() {\n    const stringifiedNotes = localStorage.getItem(\"savedNotes\");\n    if (stringifiedNotes) {\n      const savedNotes = JSON.parse(stringifiedNotes);\n      this.setState({ notes: savedNotes });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          onSearch={this.onSearch}\n          addNote={this.addNote}\n          searchText={this.state.searchText}\n        />\n        <NotesList\n          removeNote={this.removeNote}\n          onType={this.onType}\n          notes={this.state.notes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}